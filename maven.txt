Maven :  --Devops tool
--------------------------------------------
1. Maven is a build tool for Java.

2. It is a product of Apache Foundations.

3. It is capable for build on any framework of Java.

4. ANT TOOL --> MAVEN - 2002

5. Maven is a open source/ free to download

6. Maven - Build, Some tests cases, Reports, Manage the project

7. Maven --" PROJECT MANAGEMENT TOOL " 

8. Maven operates on priniciple called as PROJECT OBJECT MODEL - POM

9.Java is light weight .In advance java we have to add jar files to our projects. 
The jar files are in plenty â€Œin spring. But by using maven all the jar files will be automatically downloaded from the maven repository.

------------------------------
POM.xml
------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.sandip</groupId>
  <artifactId>MavenExample1</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <dependencies>

  <!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>

  <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>5.2.1.RELEASE</version>
</dependency>

  <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.12.RELEASE</version>
</dependency>
  
  
  </dependencies>
</project>
----------------------------------------------------------------------------------------------------------------
JUNIT TEST :- is a functional testing done by the developers.
example:- assertEquals(25,square(5));
25 is the expected output of square(5) .If it is true it display green signal other wise it will display brown signal.
---------------------------------------------------------------------------------------------------
public class Calculator {
	public int square(int i) 
	{
		return i*i;
	}
	public String user(String string) 
	{
		return "kundan";
	}
	public String concat(String string, String string2) {
		
		return string+string2;
	}

	public int sub(int i, int j) {
		
		return i-j;
	}

	public int add(int i, int j) {
		
		return i+j;
	}

}
-----------------------------------------------------------------------------
import static org.junit.Assert.*;
import org.junit.Test;
public class TestCalculator
{
	Calculator cal=new Calculator();
	@Test  //Used to identify that a method is a test method

	public void testSquares()
	{
		
		assertEquals(25,cal.square(5));
		assertEquals(5*5,cal.square(5));
		assertEquals((3+4),cal.add(3,4));
		assertEquals(15,cal.add(7,8));
		assertEquals(-1,cal.sub(7,8));
	}
	
	@Test
	public void testUser()
	{
		assertEquals("kundan",cal.user("kundan"));
	}
	
	@Test
	public void stringtest1()
	{
	String result = cal.concat("Hello", "World");
	assertEquals("HelloWorld", result);
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2); 
	}
}
------------------------------------------------------------------------
example-2
----------------
import static org.junit.Assert.*;
import org.junit.Test; 
public class TestAssertions 
{ 
	@Test  
	public void testAssertions()
	{       
		//test data   
		String str1 = new String ("abc"); 
		String str2 = new String ("abc");   
		String str3 = null;    
		String str4 = "abc";   
		String str5 = "abc";     
		int val1 = 5;     
		int val2 = 6;       
		String[] expectedArray = {"one", "two", "three"};      
		String[] resultArray =  {"one", "two", "three"};  
		//Check that two objects are equal     
		assertEquals(str1, str2);  
		//Check that a condition is true      
		assertTrue (val1 < val2);  
		//Check that a condition is false    
		assertFalse(val1 > val2);  
		//Check that an object isn't null      
		assertNotNull(str1);  
		//Check that an object is null      
		assertNull(str3);  
		//Check if two object references point to the same object      
		assertSame(str4,str5);  
		//Check if two object references not point to the same object   
		assertNotSame(str1,str3);  
		//Check whether two arrays are equal to each other.      
		assertArrayEquals(expectedArray, resultArray);   
	} 
} 
----------------------------------------------------------------------------------------------
*
maven dependency for junit 4
-------------------------------------------------------------
wap to enter 3 nos and find the greatest and test it using JUNIT.
-------------------------------------------------------------------
example--3
-------------------

public class TestGreatest {

	public static int getMax(int x, int y ,int z)
	{
        if(x > y && x > z )
        {
            return x;
        }
        else if(y > x && y > z)
        {
            return y;
        }
        else
        {
        	return z;
        }
    }
}
--------------------------------------------------------------------------
import static org.junit.Assert.*;
import org.junit.Test; 
public class TestAssertions 
{ 
TestGreatest gt=new TestGreatest();
	@Test  
	public void testAssertions()
	{       
		//test data   
		String str1 = new String ("abc"); 
		String str2 = new String ("abc");   
		String str3 = null;    
		String str4 = "abc";   
		String str5 = "abc";     
		int val1 = 5;     
		int val2 = 6;       
		String[] expectedArray = {"one", "two", "three"};      
		String[] resultArray =  {"one", "two", "three"};  
		//Check that two objects are equal     
		assertEquals(str1, str2);  
		//Check that a condition is true      
		assertTrue (val1 < val2);  
		//Check that a condition is false    
		assertFalse(val1 > val2);  
		//Check that an object isn't null      
		assertNotNull(str1);  
		//Check that an object is null      
		assertNull(str3);  
		//Check if two object references point to the same object      
		assertSame(str4,str5);  
		//Check if two object references not point to the same object   
		assertNotSame(str1,str3);  
		//Check whether two arrays are equal to each other.      
		assertArrayEquals(expectedArray, resultArray);   
		assertEquals(15,gt.getMax(7,8,15));
	} 
} 
---------------------------------------------------------------------------------------------------
Example-4
-------------------
public class Calculation1 {  
  
    public static int findMax(int arr[])
    {  
        int max=0;  
        for(int i=1;i<arr.length;i++)
        {  
            if(max<arr[i])  
                max=arr[i];  
        }  
        return max;  
    }  
}  
------------------------------------
import static org.junit.Assert.*;  
 
import org.junit.Test;  
  
public class TestLogic {  
  
    @Test  
    public void testFindMax(){  
        assertEquals(4,Calculation1.findMax(new int[]{1,3,4,2}));  
        assertEquals(14,Calculation1.findMax(new int[]{11,13,14,12}));  
         
    }  
}  
-------------------------------------------------------------------------










