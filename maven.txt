Maven :  --Devops tool
--------------------------------------------
1. Maven is a build tool for Java.

2. It is a product of Apache Foundations.

3. It is capable for build on any framework of Java.

4. ANT TOOL --> MAVEN - 2002

5. Maven is a open source/ free to download

6. Maven - Build, Some tests cases, Reports, Manage the project

7. Maven --" PROJECT MANAGEMENT TOOL " 

8. Maven operates on priniciple called as PROJECT OBJECT MODEL - POM

9.Java is light weight .In advance java we have to add jar files to our projects. 
The jar files are in plenty â€Œin spring. But by using maven all the jar files will be automatically downloaded from the maven repository.

------------------------------
POM.xml
------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.sandip</groupId>
  <artifactId>MavenExample1</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <dependencies>

  <!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>

  <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>5.2.1.RELEASE</version>
</dependency>

  <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.12.RELEASE</version>
</dependency>
  
  
  </dependencies>
</project>
----------------------------------------------------------------------------------------------------------------
JUNIT TEST :- is a functional testing done by the developers.
example:- assertEquals(25,square(5));
25 is the expected output of square(5) .If it is true it display green signal other wise it will display brown signal.
---------------------------------------------------------------------------------------------------
public class Calculator {
	public int square(int i) 
	{
		return i*i;
	}
	public String user(String string) 
	{
		return "kundan";
	}
	public String concat(String string, String string2) {
		
		return string+string2;
	}

	public int sub(int i, int j) {
		
		return i-j;
	}

	public int add(int i, int j) {
		
		return i+j;
	}

}
-----------------------------------------------------------------------------
import static org.junit.Assert.*;
import org.junit.Test;
public class TestCalculator
{
	Calculator cal=new Calculator();
	@Test  //Used to identify that a method is a test method

	public void testSquares()
	{
		
		assertEquals(25,cal.square(5));
		assertEquals(5*5,cal.square(5));
		assertEquals((3+4),cal.add(3,4));
		assertEquals(15,cal.add(7,8));
		assertEquals(-1,cal.sub(7,8));
	}
	
	@Test
	public void testUser()
	{
		assertEquals("kundan",cal.user("kundan"));
	}
	
	@Test
	public void stringtest1()
	{
	String result = cal.concat("Hello", "World");
	assertEquals("HelloWorld", result);
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2); 
	}
}
------------------------------------------------------------------------
example-2
----------------
import static org.junit.Assert.*;
import org.junit.Test; 
public class TestAssertions 
{ 
	@Test  
	public void testAssertions()
	{       
		//test data   
		String str1 = new String ("abc"); 
		String str2 = new String ("abc");   
		String str3 = null;    
		String str4 = "abc";   
		String str5 = "abc";     
		int val1 = 5;     
		int val2 = 6;       
		String[] expectedArray = {"one", "two", "three"};      
		String[] resultArray =  {"one", "two", "three"};  
		//Check that two objects are equal     
		assertEquals(str1, str2);  
		//Check that a condition is true      
		assertTrue (val1 < val2);  
		//Check that a condition is false    
		assertFalse(val1 > val2);  
		//Check that an object isn't null      
		assertNotNull(str1);  
		//Check that an object is null      
		assertNull(str3);  
		//Check if two object references point to the same object      
		assertSame(str4,str5);  
		//Check if two object references not point to the same object   
		assertNotSame(str1,str3);  
		//Check whether two arrays are equal to each other.      
		assertArrayEquals(expectedArray, resultArray);   
	} 
} 
----------------------------------------------------------------------------------------------
*
maven dependency for junit 4
-------------------------------------------------------------
wap to enter 3 nos and find the greatest and test it using JUNIT.
-------------------------------------------------------------------
example--3
-------------------

public class TestGreatest {

	public static int getMax(int x, int y ,int z)
	{
        if(x > y && x > z )
        {
            return x;
        }
        else if(y > x && y > z)
        {
            return y;
        }
        else
        {
        	return z;
        }
    }
}
--------------------------------------------------------------------------
import static org.junit.Assert.*;
import org.junit.Test; 
public class TestAssertions 
{ 
TestGreatest gt=new TestGreatest();
	@Test  
	public void testAssertions()
	{       
		//test data   
		String str1 = new String ("abc"); 
		String str2 = new String ("abc");   
		String str3 = null;    
		String str4 = "abc";   
		String str5 = "abc";     
		int val1 = 5;     
		int val2 = 6;       
		String[] expectedArray = {"one", "two", "three"};      
		String[] resultArray =  {"one", "two", "three"};  
		//Check that two objects are equal     
		assertEquals(str1, str2);  
		//Check that a condition is true      
		assertTrue (val1 < val2);  
		//Check that a condition is false    
		assertFalse(val1 > val2);  
		//Check that an object isn't null      
		assertNotNull(str1);  
		//Check that an object is null      
		assertNull(str3);  
		//Check if two object references point to the same object      
		assertSame(str4,str5);  
		//Check if two object references not point to the same object   
		assertNotSame(str1,str3);  
		//Check whether two arrays are equal to each other.      
		assertArrayEquals(expectedArray, resultArray);   
		assertEquals(15,gt.getMax(7,8,15));
	} 
} 
---------------------------------------------------------------------------------------------------
Example-4
-------------------
public class Calculation1 {  
  
    public static int findMax(int arr[])
    {  
        int max=0;  
        for(int i=1;i<arr.length;i++)
        {  
            if(max<arr[i])  
                max=arr[i];  
        }  
        return max;  
    }  
}  
------------------------------------
import static org.junit.Assert.*;  
 
import org.junit.Test;  
  
public class TestLogic {  
  
    @Test  
    public void testFindMax(){  
        assertEquals(4,Calculation1.findMax(new int[]{1,3,4,2}));  
        assertEquals(14,Calculation1.findMax(new int[]{11,13,14,12}));  
         
    }  
}  
-------------------------------------------------------------------------
Example-5
-----------------------
@BeforeClass annotation specifies that method will be invoked only once, before starting all the tests.

@Before annotation specifies that method will be invoked before each test.

@After annotation specifies that method will be invoked after each test.

@AfterClass annotation specifies that method will be invoked only once, after finishing all the tests.
--------------------------------------------------------------------------------------
import java.util.StringTokenizer;

public class Calculation2 {  
    //method that returns maximum number  
    public static int findMax(int arr[]){  
        int max=0;  
        for(int i=1;i<arr.length;i++){  
            if(max<arr[i])  
                max=arr[i];  
        }  
        return max;  
    }  
    //method that returns cube of the given number  
    public static int cube(int n){  
        return n*n*n;  
    }  
    //method that returns reverse words   
    public static String reverseWord(String str){  
  
        StringBuilder result=new StringBuilder();  
        StringTokenizer tokenizer=new StringTokenizer(str," ");  
  
        while(tokenizer.hasMoreTokens())
{  
        StringBuilder sb=new StringBuilder();  
        sb.append(tokenizer.nextToken());  
        sb.reverse();  
  
        result.append(sb);  
        result.append(" ");  
        }  
        return result.toString();  
    }  
}  
===============================================
import static org.junit.Assert.assertEquals;  
import org.junit.After;  
import org.junit.AfterClass;  
import org.junit.Before;  
import org.junit.BeforeClass;  
import org.junit.Test;  

  
public class TestCase2 {  
  
    @BeforeClass  
    public static void setUpBeforeClass() throws Exception {  
        System.out.println("before class");  
    }  
    @Before  
    public void setUp() throws Exception {  
        System.out.println("before");  
    }  
  
    @Test  
    public void testFindMax(){  
        System.out.println("test case find max");  
        assertEquals(4,Calculation2.findMax(new int[]{1,3,4,2}));  
           }  
    @Test  
    public void testCube(){  
        System.out.println("test case cube");  
        assertEquals(27,Calculation2.cube(3));  
    }  
    @Test  
    public void testReverseWord(){  
        System.out.println("test case reverse word");  
        assertEquals("ym eman si nahk",Calculation2.reverseWord("my name is khan"));  
    }  
    @After  
    public void tearDown() throws Exception {  
        System.out.println("after");  
    }  
  
    @AfterClass  
    public static void tearDownAfterClass() throws Exception {  
        System.out.println("after class");  
    }  
  
}  
-----------------------------------------------------------------
Mockito :-
----------------------
It is a test framework.It is mocking framework.
mocking :- It cloning of the devloped project.
one copy will be with the developers and one copy will be with testers.
example :- login page developed by developers .the tester will test the username,password ,remember me.
The clone is provided to the tester any error then the developers will make the change with the real object and again give the clone to the testers.
Mocking is a process of developing the object that act as the mock or clone of the real objects.
In this mock objects are used instead of real object for testing purpose.

To mock object we have to know 3 key words
1)stub:- It hold pre-defined data and provide it to answer the call during testing.
They are dummy object with a minimum no of methods required for a test.
2)Fake:-They are objects that contains working implementations but are different from the production one.
3)Mock:- It is dummy object or clone of real object used for testing.
They are created with open-source library or mocking framework like mockito.
--------------------------------------------------------------------------------------------------------
<dependencies>

<dependency>
<groupId>org.junit.jupiter</groupId>
<artifactId>junit-jupiter-engine</artifactId>
<version>5.6.2</version>
<scope>test</scope>
</dependency>

<dependency>
<groupId>org.mockito</groupId>
<artifactId>mockito-core</artifactId>
<version>3.3.3</version>
<scope>test</scope>
</dependency>

<dependency>
<groupId>org.mockito</groupId>
<artifactId>mockito-junit-jupiter</artifactId>
<version>3.3.3</version>
<scope>test</scope>
</dependency>

</dependencies>
------------------------------------------------------------------------------------------------------------------- 

example-1
-------------------
package org.mock;
public interface Maths 
{
public int add(int a,int b);
public int sub(int a,int b);
public int mul(int a,int b);
public int div(int a,int b);
}
---------------------------------------------------------------
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import java.util.Iterator;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.mock.Maths;
public class TestMock 
{
	@Test
	public void testMockA()
	{
		int a=10,b=20;
Maths m=mock(Maths.class);
when(m.add(a,b)).thenReturn(a+b);
assertEquals(30,m.add(a,b));
}
	@DisplayName("Testing Subtraction of 2 nos")
	@Order(3)
	@Test
	public void testMockB()
	{
		int a=10,b=20;
Maths m=mock(Maths.class);
when(m.sub(a,b)).thenReturn(a-b);
assertEquals(-10,m.sub(a,b));
}
	@DisplayName("Testing Multiply 2 nos")
	@Order(2)
	@Test
public void testMockC()
	{
		int a=10,b=20;
Maths m=mock(Maths.class);
when(m.mul(a,b)).thenReturn(a*b);
assertEquals(200,m.mul(a,b));
}
@DisplayName("Testing Divide 2 nos")
	@Test
	@Order(1)
public void testMockD()
	{
		int a=20,b=10;
Maths m=mock(Maths.class);
when(m.div(a,b)).thenReturn(a/b);
assertEquals(2,m.div(a,b));
}
@DisplayName("Testing Iterator")
@Test
@Order(5)
public void testMockE()
{
	Iterator<String> itr=mock(Iterator.class);
	when(itr.next()).thenReturn("One").thenReturn("Two").thenReturn("Three");
	String actual=itr.next()+" "+itr.next()+" "+itr.next();
	assertEquals("One Two Three",actual);
}

@DisplayName("Testing Comparable")
@Test
@Order(6)
public void testMockF()
{
	Comparable<String> comp=mock(Comparable.class);
when(comp.compareTo("sandip")).thenReturn(10);
when(comp.compareTo("anil")).thenReturn(20);
when(comp.compareTo("sunil")).thenReturn(30);
assertEquals(20,comp.compareTo("anil"));
}
}
-----------------------------------------------------------------------------------

example-2
----------------
package org.mock;
import java.sql.*;
public class DataBaseConnect 
{
public Connection getCon() throws ClassNotFoundException,SQLException
{
	Connection con=null;
	Class.forName("oracle.jdbc.driver.OracleDriver");
	con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","1234");
	return con;
}
}
--------------------------------------------------------------------------
import java.sql.Connection;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mock.DataBaseConnect;
public class TestMock2 
{
	private DataBaseConnect dbc;
	private Connection con;
@BeforeEach
public void initData()
{
	dbc=new DataBaseConnect();
	}
	@Test
	public void testGetCon()
	{
		assertDoesNotThrow(()->{
			con=dbc.getCon();
		});
		assertNotNull(con,"connection is not created,");
	}
	
	@AfterEach
	public void clean()
	{
		dbc=null;
		con=null;
	}
}
---------------------------------------------------------------------------------------------------------------------------------
*note:-
---------------
assertNotNull/assertNull()

assertNotNull(object): This method is used to specify that given object is not a nulll value it holds some data.else the Test is failed.

assertNull(object): It indicates given object is null,else Test is failed.

assertDoesNotThrow(Executable):
This is used to specify that our method call is not throwing any exception else if it will make the test fail.
--------------------------------------------------------------------------------------------------	
	
















