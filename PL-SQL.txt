PL-SQL
--------------------
Programming Language Structure query Language.

The program is divided into 3 parts.
1)declare -It is used to declare the variables.
2)begin --It is used to write the logic.
3)end --This is the end of the program.
------------------------------------------------
example 1
-------------------
declare
a number:=10;
b number:=20;
c number;
begin
c:=a+b;
dbms_output.put_line('The result is '||c);
end;
----------------------------------------------------------
example-2
------------------
declare
a number;
b number;
c number;
begin
a:=:a;
b:=:b;
c:=a+b;
dbms_output.put_line('The result is '||c);
end;
------------------------------------------------------
example-3(greatest of 2 numbers)
-------------------------------------------------
declare
a number;
b number;
begin
a:=:a;
b:=:b;
if(a>b)then
dbms_output.put_line('The greatest is '||a);
else
dbms_output.put_line('The greatest is '||b);
end if;
end;
------------------------------------------------------------------------
example-4(greatest of 3 numbers)
-------------------------------------------------
declare
a number;
b number;
c number;
begin
a:=:a;
b:=:b;
c:=:c;
if(a>b and a>c)then
dbms_output.put_line('The greatest is '||a);
elsif(b>a and b>c)then
dbms_output.put_line('The greatest is '||b);
else
dbms_output.put_line('The greatest is '||c);
end if;
end;
-------------------------------------------------------------------------------------
example-5(find number is even or odd)
-------------------------------------------------------------
declare
a number;
begin
a:=:a;
if(a mod 2=0)then
dbms_output.put_line('The number is even');
else
dbms_output.put_line('The number is odd');
end if;
end;
-----------------------------------------------------------------------
||  -This is a concade symbol like in java it +;

example:- select 'the employee '|| name|| ' has phoneno  ' ||phone from employee;
--------------------------------------------------------------------------------------------------------------
example 6:-
-----------------------------------------------------
declare
a number;
b number;
opt varchar2(20);
begin
a:=:a;
b:=:b;
opt:=:opt;
case
when opt='add'
then dbms_output.put_line('The sum is : '||(a+b)); 
when opt='sub'
then dbms_output.put_line('The sub is : '||(a-b)); 
when opt='mul'
then dbms_output.put_line('The mul is : '||(a*b)); 
when opt='div'
then dbms_output.put_line('The div is : '||(a/b)); 
else
dbms_output.put_line('Wrong Input'); 
end case;
end;
--------------------------------------------------------------------------------------------
example 7:-
--------------------
declare
a number;
begin
a:=:a;
case
when a=1
then dbms_output.put_line('One '); 
when a=2
then dbms_output.put_line('Two '); 
when a=3
then dbms_output.put_line('Three '); 
when a=4
then dbms_output.put_line('Four '); 
when a=5
then dbms_output.put_line('Five '); 
else
dbms_output.put_line('Wrong Input'); 
end case;
end;
-----------------------------------------------------------------------
enter rollno,name,address,marks and find the division.
-----------------------------------------------------------------------
declare
rollno number;
name varchar2(30);
address varchar2(30);
marks number;
begin
rollno:=:rollno;
name:=:name;
address:=:address;
marks:=:marks;
dbms_output.put_line('The rollno is:'||rollno);
dbms_output.put_line('The name is:'||name);
dbms_output.put_line('The address is:'||address);
dbms_output.put_line('The marks is:'||marks);
case
when marks >= 70
then dbms_output.put_line('First Division');
when marks >= 60
then dbms_output.put_line('Second Division');
when marks >= 50
then dbms_output.put_line('Third Division');
else
dbms_output.put_line('Fail');
end case;
end;
------------------------------------------------------------ 
loops:-
-------------
declare
i number;
begin
for i in 1..10 loop
dbms_output.put_line(i);
end loop;
end;
-------------------------------------------------
declare
i number;
begin
for i in  reverse 1..10 loop
dbms_output.put_line(i);
end loop;
end;
-----------------------------------------------------------------------
create table circlemdocs(radius number,area number);
-----------------------------------------------------------------------
declare
pi constant number:=3.14;
radius number;
area number;
begin
for radius in 5..10 loop
area:=pi*power(radius,2);
insert into circlemdocs values(radius,area);
end loop;
end;
-----------------------------------------------------------------------
select * from circlemdocs;
----------------------------------------------------
function :-
function returns a value.
There are 2 types of functions:- 1)user defined function, 2)pre-defined function
--------------------------------------------------------------------------------
example-1
--------------Function create----------
create or replace function addno(i number,j number) return number is
begin
return i+j;
end;
-------------Function call------------------------------
declare 
a number;
begin
a:=addno(100,200);
dbms_output.put_line('The sum is '||a);
end;
-------------------------------------------------------------
procedure :- It doesnot return any value
---------------------------------------create procedure-----------------------
create or replace procedure add_no(i number default 0,j number default 0,k number default 0) is
begin
dbms_output.put_line('The sum is '||(i+j+k));
end;
-------------------call procedure------------------------------------------------
begin
add_no(3,4,5);
end;
--------------------------------------------------------------------
cursor :- It can store more than one record into a cursor variable.
example:- 
cursor c is select name from employee;
in c we can store 1000's of records we can use loop to iterate the data.
-----------------------------------------------------------------------------------------------
There are 2 types of cursor
1)inplicit cursor :- oracle uses it when we write select * from bankemp;
2)explicit cursor:- developers have control on it.devlopers can manipulate it.

steps:-
1)declare 
2)open
3)manipulate
4)close

attributes of cursor:-
------------------------------
1)%isopen :- The cursor is in the middle of the table (true) .if it reaches the end of the report it will return false.
2) %found :- The cursor is in the middle of the table.
3)%notfound:- The cursor is in the end of the table
4)%rowcount:- It will count the number of rows.
-------------------------------------------------------------------------------------
example:-
--------------------
declare
cursor c is select radius from circlemdocs;
n number;
begin
open c;
loop
fetch c into n;
exit when c %notfound;
dbms_output.put_line(n);
end loop;
end;
------------------------------------------------------
example-2
-----------------------------
declare
cursor c is select radius,area from circlemdocs;
n number;
a number;
begin
open c;
loop
fetch c into n,a;
exit when c %notfound;
dbms_output.put_line(n || ' the area is '|| a);
end loop;
end;

---------------------------------------------------
Trigger :- automatically fired
example :- salary posting,telcom bill generation.
Trigger time :- before,after
Trigger event:-insert,update,delete
--------------------------------------------------
create or replace trigger t1
before insert on mdocsemployee
begin
if(to_char(sysdate,'dy')in('sat','sun')) or (to_char(sysdate,'HH24:MI') not between '09' and '16')
then
raise_application_error(-20500,'you cannot insert data after business hours');
end if;
end;
----------------------------------------------------------------------------------
create table mdocsemployee(empno number,name varchar2(30),address varchar2(30));

insert into mdocsemployee values(102,'anu','bangalore');
--------------------------------------------------------------------------------------------



